{"version":3,"sources":["components/Bots/discord-example.png","components/Bots/telegram-example.png","components/CiCd/kvlt-ci-cd.png","components/Navbar/Github.tsx","components/Navbar/index.tsx","components/common/Header.tsx","OptionsContext.tsx","components/Home/Checkbox.tsx","components/Home/Options.tsx","components/Home/Demo.tsx","components/Home/index.tsx","components/common/SubHeader.tsx","components/common/Text.tsx","components/common/ListLink.tsx","components/Faq/WhatIsTrveKvlt.tsx","components/Faq/Inspiration.tsx","components/Faq/index.tsx","components/common/Image.tsx","components/Bots/Discord.tsx","components/Bots/Telegram.tsx","components/Bots/index.tsx","components/CiCd/Technologies.tsx","components/CiCd/PipelineFlow.tsx","components/CiCd/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LinkWrapper","styled","a","Github","target","href","xmlns","width","height","viewBox","d","Bar","div","Navbar","to","Header","h1","SubText","p","HeaderContainer","props","header","subtext","defaultState","convertGodToSatan","convertUToV","convertCToK","convertOTo√ñ","convertGenresToTrveNorwegianBlackMetal","genres","OptionsContext","React","createContext","options","setOption","key","OptionsProvider","children","useState","setOptions","Provider","value","state","oldValue","Container","Label","HiddenCheckbox","input","attrs","type","Icon","svg","StyledCheckbox","checked","CheckboxContainer","Checkbox","onClick","label","points","OptionsContainer","Options","useContext","ConvertStringToKvltOptionsKeys","InputTextArea","textarea","DisplayArea","Demo","userInput","setUserInput","convertedUserInput","convertStringToKvlt","onChange","e","Home","SubHeader","h2","SubHeaderContainer","text","Text","TextContainer","ListLink","ListLinkContainer","WhatIsTrveKvlt","Inspiration","Faq","Image","img","defaultWidth","ImageContainer","src","Discord","DiscordImage","Telegram","TelegramImage","Bots","Technologies","PipelineFlow","KvltCiCdImage","CiCd","App","exact","path","component","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a156ba9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/discord-example.25c3e56e.png\";","module.exports = __webpack_public_path__ + \"static/media/telegram-example.c8cc2f63.png\";","module.exports = __webpack_public_path__ + \"static/media/kvlt-ci-cd.0aa3b751.png\";","import React from 'react'\nimport styled from 'styled-components'\n\nconst LinkWrapper = styled.a`\n  fill: white;\n  margin-left: auto;\n  margin-right: 5px;\n  transition: 0.3s;\n  &:hover {\n    fill: #1b1b1b;\n  }\n`\n\nexport default function Github () {\n  return (\n    <LinkWrapper\n      target='_blank'\n      href='https://github.com/JacobTheEvans/kvlt-bot'\n    >\n      <svg\n        xmlns='http://www.w3.org/2000/svg'\n        width='20px'\n        height='20px'\n        viewBox='0 0 24 24'\n      >\n        <path d='M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z'/>\n      </svg>\n    </LinkWrapper>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport Github from './Github'\n\nconst Bar = styled.div`\n  width: 100%;\n  background-color: #6d6d6d;\n  padding: 15px 10px;\n  display: flex;\n  align-items: center;\n`\n\nconst LinkWrapper = styled.div`\n  & > a {\n    color: white;\n    font-size: 18px;\n    font-family: 'Germania One', cursive;\n    margin-right: 10px;\n    transition: 0.3s;\n    text-decoration: none;\n  }\n  & > a:first-of-type {\n    margin-left: 5px;\n  }\n  & > a:hover {\n    color: #1b1b1b;\n  }\n  @media only screen and (max-width: 800px) {\n    & > a {\n      margin-right: 20px;\n      font-size: 20px;\n    }\n  }\n`\n\nexport default function Navbar () {\n  return (\n    <Bar>\n      <LinkWrapper>\n        <Link to='/'>Home</Link>\n      </LinkWrapper>\n      <LinkWrapper>\n        <Link to='/bots'>Bots</Link>\n      </LinkWrapper>\n      <LinkWrapper>\n        <Link to='/faq'>FAQ</Link>\n      </LinkWrapper>\n      <LinkWrapper>\n        <Link to='/ci-cd'>CI/CD</Link>\n      </LinkWrapper>\n      <Github />\n    </Bar>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Header = styled.h1`\n  font-size: 6rem;\n  margin: 60px 0px 0px 0px;\n  font-family: 'Germania One', cursive;\n  width: 100%;\n  text-align: center;\n  color: #424242;\n  @media only screen and (max-width: 800px) {\n    font-size: 4rem;\n  }\n`\n\nconst SubText = styled.p`\n  padding: 7px 10px 7px 0px;\n  font-family: 'Germania One', cursive;\n  font-size: 20px;\n  width: 850px;\n  margin: 30px auto 40px auto;\n  @media only screen and (max-width: 800px) {\n    width: 95%;\n  }\n`\n\ntype HeaderContainerProps = {\n  header: string\n  subtext: string\n}\n\nexport default function HeaderContainer (props: HeaderContainerProps) {\n  const {\n    header,\n    subtext\n  } = props\n  return (\n    <>\n      <Header>\n        {header}\n      </Header>\n      <SubText>\n        {subtext}\n      </SubText>\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  ConvertStringToKvltOptions,\n  ConvertStringToKvltOptionsKeys\n} from 'kvlt-konverter'\n\ntype OptionsProviderProps = {\n  children: React.ReactNode\n}\n\ntype OptionsContextType = {\n  options: ConvertStringToKvltOptions,\n  setOption (key: ConvertStringToKvltOptionsKeys): void\n}\n\nconst defaultState = {\n  convertGodToSatan: true,\n  convertUToV: true,\n  convertCToK: true,\n  convertOTo√ñ: true,\n  convertGenresToTrveNorwegianBlackMetal: true,\n  genres: ['country', 'rock', 'pop', 'hip hop']\n}\n\nconst OptionsContext = React.createContext<OptionsContextType>({\n  options: defaultState,\n  setOption: (key: ConvertStringToKvltOptionsKeys) => {}\n})\nexport default OptionsContext\n\nexport function OptionsProvider (props: OptionsProviderProps) {\n  const { children } = props\n  const [options, setOptions] =  useState(\n    defaultState as ConvertStringToKvltOptions\n  )\n\n  function setOption (key: ConvertStringToKvltOptionsKeys) {\n    return () => {\n      setOptions(state => {\n        const oldValue = state[key]\n        if (typeof oldValue === 'boolean') {\n          return {\n            ...state,\n            [key]: !oldValue\n          }\n        } else {\n          return state\n        }\n      })\n    }\n  }\n\n  return (\n    <OptionsContext.Provider\n      value={{\n        options,\n        setOption\n      }}\n    >\n      {children}\n    </OptionsContext.Provider>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  margin: 5px 30px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  display: flex;\n  align-items: center;\n`\n\nconst Label = styled.p`\n  margin: 0px;\n  padding: 7px 10px 7px 0px;\n  font-family: 'Germania One', cursive;\n  font-size: 20px;\n`\n\nconst HiddenCheckbox = styled.input.attrs({ type: 'checkbox' })`\n  // Hide checkbox visually but remain accessible to screen readers.\n  // Source: https://polished.js.org/docs/#hidevisually\n  border: 0;\n  clip: rect(0 0 0 0);\n  clippath: inset(50%);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n  color: #6d6d6d;\n`\nconst Icon = styled.svg`\n  fill: none;\n  stroke: white;\n  stroke-width: 2px;\n`\n\ninterface StyledCheckboxProps {\n  readonly checked: boolean\n}\n\nconst StyledCheckbox = styled.div<StyledCheckboxProps>`\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  background: ${props => props.checked ? 'black' : 'gray'};\n  border-radius: 3px;\n  transition: all 150ms;\n  ${Icon} {\n    visibility: ${props => props.checked ? 'visible' : 'hidden'}\n  }\n  ${HiddenCheckbox}:focus + & {\n    box-shadow: 0 0 0 3px black;\n  }\n`\n\nconst CheckboxContainer = styled.div`\n  display: inline-block;\n  vertical-align: middle;\n`\n\ntype CheckboxProps = {\n  onClick: any,\n  checked: boolean,\n  label: string\n}\n\nexport default function Checkbox (props: CheckboxProps) {\n  const {\n      onClick,\n      checked,\n      label\n  } = props\n  return (\n    <Container>\n      <Label>{label}</Label>\n      <CheckboxContainer>\n        <HiddenCheckbox\n          checked={checked}\n          onClick={onClick}\n        />\n        <StyledCheckbox\n          onClick={onClick}\n          checked={checked}\n        >\n          <Icon viewBox='0 0 24 24'>\n            <polyline points='20 6 9 17 4 12' />\n          </Icon>\n        </StyledCheckbox>\n      </CheckboxContainer>\n    </Container>\n  )\n}\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { ConvertStringToKvltOptionsKeys } from 'kvlt-konverter'\nimport Checkbox from './Checkbox'\nimport OptionsContext from '../../OptionsContext'\n\nconst OptionsContainer = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  @media only screen and (max-width: 800px) {\n    display: block;\n    border: 2px solid #1b1b1b;\n    margin: 15px auto;\n    width: 95%;\n  }\n`\n\nexport default function Options () {\n  const { options, setOption } = useContext(OptionsContext)\n  if (\n    (typeof setOption === 'undefined') ||\n    (typeof options === 'undefined')\n  ) return <p>Loading</p>\n  return (\n    <OptionsContainer>\n      <Checkbox\n        label='god to satan'\n        onClick={setOption(ConvertStringToKvltOptionsKeys.convertGodToSatan)}\n        checked={options[ConvertStringToKvltOptionsKeys.convertGodToSatan] as boolean}\n      />\n      <Checkbox\n        label='u to v'\n        onClick={setOption(ConvertStringToKvltOptionsKeys.convertUToV)}\n        checked={options[ConvertStringToKvltOptionsKeys.convertUToV] as boolean}\n      />\n      <Checkbox\n        label='c to k'\n        onClick={setOption(ConvertStringToKvltOptionsKeys.convertCToK)}\n        checked={options[ConvertStringToKvltOptionsKeys.convertCToK] as boolean}\n      />\n      <Checkbox\n        label='o to √∂'\n        onClick={setOption(ConvertStringToKvltOptionsKeys.convertOTo√ñ)}\n        checked={options[ConvertStringToKvltOptionsKeys.convertOTo√ñ] as boolean}\n      />\n      <Checkbox\n        label='genres to black metal'\n        onClick={setOption(ConvertStringToKvltOptionsKeys.convertGenresToTrveNorwegianBlackMetal)}\n        checked={options[ConvertStringToKvltOptionsKeys.convertGenresToTrveNorwegianBlackMetal] as boolean}\n      />\n    </OptionsContainer>\n  )\n}\n","import React, { useState, ChangeEvent,  } from 'react'\nimport styled from 'styled-components'\nimport { convertStringToKvlt } from 'kvlt-konverter'\nimport OptionsContext from '../../OptionsContext'\nimport Options from './Options'\n\nconst Container = styled.div`\n  width: 90%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 15px auto;\n  @media only screen and (max-width: 800px) {\n    width: 100%;\n    display: block;\n  }\n`\n\nconst InputTextArea = styled.textarea`\n  width: 100%;\n  height: 300px;\n  overflow-y: auto;\n  padding: 8px 9px;\n  border: 2px solid #1b1b1b;\n  border-width: 2px 0px 2px 2px;\n  font-size: 19px;\n  line-height: 17px;\n  font-family: 'Ubuntu', sans-serif;\n  @media only screen and (max-width: 800px) {\n    display: block;\n    border: 2px solid #1b1b1b;\n    margin: 15px auto;\n    width: 95%;\n  }\n`\n\nconst DisplayArea = styled.p`\n  width: 100%;\n  height: 300px;\n  overflow-y: auto;\n  padding: 8px 9px;\n  border: 2px solid #1b1b1b;\n  font-size: 19px;\n  line-height: 17px;\n  font-family: 'Ubuntu', sans-serif;\n  width: 100%;\n  @media only screen and (max-width: 800px) {\n    margin: 15px auto;\n    width: 95%;\n  }\n`\n\nexport default function Demo () {\n  const [userInput, setUserInput] = useState(\n    'This is awesome cult converter! Lets play some country music.'\n  )\n  const { options } = React.useContext(OptionsContext)\n\n\n  function handleOnInput (e: ChangeEvent<HTMLTextAreaElement>): void {\n    setUserInput(e.target.value)\n  }\n\n  const convertedUserInput = convertStringToKvlt(\n    userInput,\n    options\n  )\n\n  return (\n    <>\n      <Container>\n        <InputTextArea\n          value={userInput}\n          onChange={handleOnInput}\n        />\n        <DisplayArea>\n          {convertedUserInput}\n        </DisplayArea>\n      </Container>\n      <Options />\n    </>\n  )\n}\n","import React from 'react'\nimport Header from '../common/Header'\nimport Demo from './Demo'\n\nexport default function Home () {\n  return (\n    <>\n      <Header\n        header='Kvlt Konverter'\n        subtext={`A Trve Kvlt Konverter that turns 'normal' 'boring' text into the k√∂√∂lest blackest metalest text!`}\n      />\n      <Demo />\n    </>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst SubHeader = styled.h2`\n  font-size: 3rem;\n  font-family: 'Germania One', cursive;\n  margin: 35px 0px;\n  width: 100%;\n  text-align: center;\n  color: #424242;\n`\n\ntype SubHeaderContainerProps = {\n  text: string\n}\n\nexport default function SubHeaderContainer (props: SubHeaderContainerProps) {\n  const { text } = props\n  return (\n    <SubHeader>\n      {text}\n    </SubHeader>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Text = styled.p`\n  padding: 7px 5px;\n  font-family: 'Germania One', cursive;\n  font-size: 20px;\n  width: 850px;\n  margin: 10px auto;\n  @media only screen and (max-width: 800px) {\n    width: 95%;\n    padding: 7px 3px;\n  }\n`\n\ntype TextContainerProps = {\n  children: React.ReactNode\n}\n\nexport default function TextContainer (props: TextContainerProps) {\n  const { children } = props\n  return (\n    <Text>\n      {children}\n    </Text>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst ListLink = styled.a`\n  padding: 7px 0px;\n  font-family: 'Germania One', cursive;\n  font-size: 20px;\n  width: 850px;\n  margin: 10px auto;\n  display: block;\n  text-decoration: none;\n  color: #6d6d6d;\n  &:hover {\n    color: #1b1b1b;\n  }\n  @media only screen and (max-width: 800px) {\n    width: 95%;\n  }\n`\n\ntype ListLinkContainerProps = {\n  children: React.ReactNode\n  href: string\n  target: string\n}\n\nexport default function ListLinkContainer (props: ListLinkContainerProps) {\n  const {\n    children,\n    href,\n    target\n  } = props\n  return (\n    <ListLink\n      href={href}\n      target={target}\n    >\n      {children}\n    </ListLink>\n  )\n}\n","import React from 'react'\nimport SubHeader from '../common/SubHeader'\nimport Text from '../common/Text'\nimport ListLink from '../common/ListLink'\n\nexport default function WhatIsTrveKvlt () {\n  return (\n    <>\n      <SubHeader\n        text='What is Kvlt?'\n      />\n      <Text>\n        If your confused to what Kvlt means your not the only one. It is basically a slag term meaning something that embodies underground Norwegian black metal culture but has been parodied so much that is has become a meme.\n      </Text>\n      <Text>\n        Want to learn more? Checkout the links below\n      </Text>\n      <ListLink\n        target='_blank'\n        href='https://www.youtube.com/watch?v=QFvAf7rjtC8'\n      >\n        Pagefire on How to make Norwegian Black Metal\n      </ListLink>\n      <ListLink\n        target='_blank'\n        href='https://www.urbandictionary.com/define.php?term=kvlt'\n      >\n        The totally not offensive and accurate definition from Urban Dictionary\n      </ListLink>\n    </>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport SubHeader from '../common/SubHeader'\nimport Text from '../common/Text'\nimport ListLink from '../common/ListLink'\n\nconst Container = styled.div`\n  margin-top: 100px;\n`\n\nexport default function Inspiration () {\n  return (\n    <Container>\n      <SubHeader\n        text='Why did you make this?'\n      />\n      <Text>\n        This bot was heavily inspired by stupid jokes with my buddy Felix and the hilarious guys over at Pagefire. This project also gave me an opportunity to demonstrate more complicated software tools in an easy project.\n      </Text>\n      <Text>\n        Want to learn more? Checkout the links below\n      </Text>\n      <ListLink\n        target='_blank'\n        href='https://github.com/JacobTheEvans/kvlt-bot'\n      >\n        Source code of project\n      </ListLink>\n      <ListLink\n        target='_blank'\n        href='https://www.redhat.com/en/topics/devops/what-is-ci-cd'\n      >\n        Overview on what CI/CD pipeline is\n      </ListLink>\n    </Container>\n  )\n}\n","import React from 'react'\nimport WhatIsTrveKvlt from './WhatIsTrveKvlt'\nimport Inspiration from './Inspiration'\n\nexport default function Faq () {\n  return (\n    <>\n      <WhatIsTrveKvlt />\n      <Inspiration />\n    </>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface ImageProps {\n  readonly defaultWidth: number\n}\n\nconst Image = styled.img<ImageProps>`\n  width: ${({ defaultWidth }) => `${defaultWidth}px`};\n  margin: 40px auto;\n  display: block;\n  @media only screen and (max-width: 800px) {\n    width: 95%;\n  }\n`\n\ntype ImageContainerProps = {\n  src: string\n  defaultWidth: number\n}\n\nexport default function ImageContainer (props: ImageContainerProps) {\n  const {\n    src,\n    defaultWidth\n  } = props\n  return (\n    <Image\n      src={src}\n      defaultWidth={defaultWidth}\n    />\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport SubHeader from '../common/SubHeader'\nimport Text from '../common/Text'\nimport ListLink from '../common/ListLink'\nimport Image from '../common/Image'\nimport DiscordImage from './discord-example.png'\n\nconst Container = styled.div`\n  width: 100%;\n  margin: 100px 0px;\n`\n\nexport default function Discord () {\n  return (\n    <Container>\n      <SubHeader\n        text='Discord'\n      />\n      <Text>\n        The Kvlt Konverter Bot supports Discord. To add it to your Discord server simply click on the link below and select the Discord server you would like to add it to.\n      </Text>\n      <ListLink\n        target='_blank'\n        href='https://discord.com/oauth2/authorize?client_id=695618136745050137&scope=bot'\n      >\n        https://discord.com/oauth2/authorize?client_id=695618136745050137&scope=bot\n      </ListLink>\n      <Image\n        src={DiscordImage}\n        defaultWidth={850}\n      />\n    </Container>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport SubHeader from '../common/SubHeader'\nimport Text from '../common/Text'\nimport Image from '../common/Image'\nimport TelegramImage from './telegram-example.png'\n\nconst Container = styled.div`\n  width: 100%;\n  margin: 100px 0px;\n`\n\nexport default function Telegram () {\n  return (\n    <Container>\n      <SubHeader\n        text='Telegram'\n      />\n      <Text>\n        The Kvlt Konverter Bot supports Telegram. To add it to your Telegram group simply go to the group and add kvlt_bot.\n      </Text>\n      <Image\n        src={TelegramImage}\n        defaultWidth={300}\n      />\n    </Container>\n  )\n}\n","import React from 'react'\nimport Discord from './Discord'\nimport Telegram from './Telegram'\nimport Header from '../common/Header'\n\nexport default function Bots () {\n  return (\n    <>\n      <Header\n        header='Kvlt Konverter Bots'\n        subtext={`Trve Kvlt bots that turn 'normal' 'boring' text into the k√∂√∂lest blackest metalest text! These botsw will translate your messages into Trve Kvlt text. Simply @ the bot in your chat with your message and it will reply with the translated message.`}\n      />\n      <Discord />\n      <Telegram />\n    </>\n  )\n}\n","import React from 'react'\nimport SubHeader from '../common/SubHeader'\nimport ListLink from '../common/ListLink'\n\nexport default function Technologies () {\n  return (\n    <>\n      <SubHeader\n        text='Technologies'\n      />\n      <ListLink\n        target='_blank'\n        href='https://travis-ci.org/'\n      >\n        Travis CI for CI pipeline software\n      </ListLink>\n      <ListLink\n        target='_blank'\n        href='https://mochajs.org/'\n      >\n        Mocha for testing Kvlt Konverter npm package\n      </ListLink>\n      <ListLink\n        target='_blank'\n        href='https://www.npmjs.com/'\n      >\n        Npm for releasing Kvlt Konverter package\n      </ListLink>\n      <ListLink\n        target='_blank'\n        href='https://github.com/aws/aws-cdk'\n      >\n        AWS CDK for creating and managing infrastructure for CD\n      </ListLink>\n    </>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport SubHeader from '../common/SubHeader'\nimport Text from '../common/Text'\nimport Image from '../common/Image'\nimport KvltCiCdImage from './kvlt-ci-cd.png'\n\nconst Container = styled.div`\n  margin-top: 100px;\n`\n\nexport default function PipelineFlow () {\n  return (\n    <Container>\n      <SubHeader\n        text='Pipeline Flow'\n      />\n      <Text>\n        Below you will find a sequence diagram explaining the full flow of the CI/CD pipeline for the Kvlt Konverter project.\n      </Text>\n      <Image\n        src={KvltCiCdImage}\n        defaultWidth={850}\n      />\n    </Container>\n  )\n}\n","import React from 'react'\nimport Header from '../common/Header'\nimport Technologies from './Technologies'\nimport PipelineFlow from './PipelineFlow'\n\nexport default function CiCd () {\n  return (\n    <>\n      <Header\n        header='CI/CD'\n        subtext='This project serves as a simple demo of a CI (continuous integration) / CD (Continuous delivery) pipeline. More details of the technologies used and actually internal process can be found below. If your interested in how this was programmed the source code can be found on Github.'\n      />\n      <Technologies />\n      <PipelineFlow />\n    </>\n  )\n}\n","import React from 'react'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport Navbar from './components/Navbar'\nimport Home from './components/Home'\nimport Faq from './components/Faq'\nimport Bots from './components/Bots'\nimport CiCd from './components/CiCd'\n\nfunction App () {\n  return (\n    <Router>\n      <Navbar />\n      <Switch>\n        <Route\n          exact\n          path='/'\n          component={Home}\n        />\n        <Route\n          exact\n          path='/faq'\n          component={Faq}\n        />\n        <Route\n          exact\n          path='/bots'\n          component={Bots}\n        />\n        <Route\n          exact\n          path='/ci-cd'\n          component={CiCd}\n        />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createGlobalStyle } from 'styled-components'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { OptionsProvider } from './OptionsContext'\n\nconst GlobalStyle = createGlobalStyle`\n  html, body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Lato', sans-serif;\n    width: 100%;\n  }\n\n  * {\n    box-sizing: border-box\n  }\n\n  #root {\n    width: 100%;\n  }\n`\n\nReactDOM.render(\n  <React.StrictMode>\n    <OptionsProvider>\n      <App />\n    </OptionsProvider>\n    <GlobalStyle />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}